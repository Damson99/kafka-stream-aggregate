#spring:
#  cloud:
#    stream:
#      bindings:
#        words-input-channel:
#          destination: streaming-words-topic
#      kafka:
#        streams:
#          binder:
#            brokers: localhost:9092
#            configuration:
#              commit.interval.ms: 10000
#              state.dir: state-store
#              default:
#                key:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                value:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde


#spring:
#  cloud:
#    stream:
#      bindings:
#        pos-invoice-input-channel:
#          destination: avro-pos-invoice-topic
#        notification-output-channel:
#          destination: loyalty-topic
#      kafka:
#        streams:
#          binder:
#            brokers:  localhost:9092
#            configuration:
#              schema.registry.url: http://localhost:8081
#              commit.interval.ms: 10000
#              state.dir: state-store
#              default:
#                key:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                value:
#                  serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
#
#
#spring:
#  profiles:
#    active: employees-topic
##          pos-invoice-topic
#  cloud:
#    stream:
#      bindings:
#        employee-input-channel:
#          destination: employees-topic
#      kafka:
#        streams:
#          binder:
#            brokers: localhost:9092
#            configuration:
#              schema.registry.url: http://localhost:8081
#              commit.interval.ms: 10000
#              state.dir: state-store
#              default:
#                key:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                value:
#                  serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde


#Event time - when the record were generated
#Ingestion time - when the record reach the kafka broker
#Processing time - when the record is processing by your application
#
#spring:
#  profiles:
#    active: simple-invoice-topic
#  cloud:
#    stream:
#      bindings:
#        simple-invoice-input-channel:
#          destination: simple-invoice-topic
#      kafka:
#        streams:
#          binder:
#            brokers:  localhost:9092
#            configuration:
#              commit.interval.ms: 10000
#              state.dir: state-store
#              default:
#                key:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                value:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
##          timestamp extractor for windowing records. It's extracting the time from
##          the message record and define the time window
#          bindings:
#            simple-invoice-input-channel:
#              consumer:
##                name of the bean which is created in the SimpleInvoiceTimeExtractor class
#                timestampExtractorBeanName: invoiceTimesExtractor
spring:
  cloud:
    stream:
      bindings:
        user-click-input-channel:
          destination: user-click-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
          bindings:
            click-input-channel:
              consumer:
                timestampExtractorBeanName: userClickTimeExtractor